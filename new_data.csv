Card Name,Description,Labels,Stage
Configure Development and Production Server Setup,"['- Set up proxy configuration for development environment to avoid running multiple servers', '- Configure production build process to serve frontend from Django', '- Create documentation for running the application in both development and production modes']","['Dev Ops', 'Backend']",To Do
Create Protected API Routes,"['- Add JWT authentication classes to book-related views', '- Implement permission classes for user-specific book access', '- Add authentication error handling and responses']","['Security', 'API']",To Do
Add Email Verification,"['- Set up email backend configuration', '- Create email verification endpoint', '- Implement verification email sending']","['Security', 'API']",To Do
Create Book List Views,"[""- Add endpoint to get all user's books"", '- Implement filtering (read/unread/favorites)', '- Add pagination']","['API', 'Backend']",To Do
Add Search Functionality,"['- Implement book search endpoint', '- Add filtering by title, author, genre', '- Add sorting options']",['API'],To Do
Add CORS Configuration,"['- Install django-cors-headers', '- Configure CORS settings for React frontend', '- Set up proper security headers']","['Security', 'Backend']",To Do
Environment Configuration,"['- Move sensitive settings to environment variables', '- Create separate dev/prod settings files', '- Set up proper logging']","['Security', 'Dev Ops']",To Do
Create Book List Component (Simplified Version),"['- Build a component to **display books in categorized rows**, such as **Read** and **Unread**.', '- **Description**: This component will list books in the user’s library, categorized by their status (`read`/`unread`).']",['Frontend'],To Do
Add Toggle Button for Read/Unread,"['- Add a button to the book list component to **toggle books as read or unread**.', ""- **Description**: The toggle should call the backend API to update the book's `is_read` status.""]","['Frontend', 'API']",To Do
Set up virtual environment for backend package management,"['- Configure a virtual environment to manage project dependencies.', '- Use `venv` or `virtualenv` to keep packages organized and isolated.', '- Document basic setup steps for easy reference in future projects.']","['Backend', 'Dev Ops']",In Progress
Migrate database from SQLite to PostgreSQL,"['- Set up PostgreSQL as a practice database to gain experience with different database types.', '- Update project settings to integrate PostgreSQL for testing and learning.', '- Run test migrations to understand how to move data between databases.']","['Backend', 'Dev Ops']",In Progress
Configure .gitignore for project,"['- Add `.gitignore` entries to exclude unnecessary or sensitive files, such as environment files.', '- Focus on preventing common clutter (e.g., `.env`, `__pycache__`, `.DS_Store`).', '- Review the project folder for any extra files that shouldn’t be tracked.']","['Backend', 'Dev Ops']",In Progress
Create React Registration Form Component,"['- Build a **React form component** that allows users to register (username, email, password).', '- **Description**: The form should send data to the registration API endpoint to create a new user account.']","['Frontend', 'API']",In Progress
Integrate Frontend Forms with Backend Authentication,"['- Use **Axios** or **Fetch API** to send registration and login data from the frontend forms to the backend Django API.', '- **Description**: Integrate the login and registration forms with the backend so that users can register and log in properly.']","['Frontend', 'API', 'Security']",In Progress
User login API,"['Current Status:', '', '✅ Built using DRF and JWT', '✅ Endpoint for login exists', '❌ Login with email (currently using username) - this needs modification', '✅ JWT token handling implemented', '✅ Verified credentials and provides JWT', '❌ Protected routes tested with tokens', '', '\u200c', '', '- Built the **User Login API** using **Django REST Framework**.', '- Set up an endpoint for users to log in with their **email and password**.', '- Integrated **JWT (JSON Web Tokens)** to handle user sessions and security, ensuring the user stays logged in and can securely access protected routes.', '- Verified login credentials against the database and provided a **JWT token** upon successful authentication.']",['Backend'],In Progress
Set up React Project with Tailwind,"['- Initialize React project using Vite', '- Configure Tailwind CSS', '- Set up project structure for components']","['Frontend', 'Backend']",In Progress
Create Basic Navigation Component,"['- Create reusable navigation bar component', '- Add basic routing links (Home, Login, Register)', '- Add basic styling for MVP phase']",['Frontend'],Done
Minimal React Setup,"['\u200c', '', '- Basic registration form', '- Basic login form', '- Simple protected route setup']","['Frontend', 'Backend']",Done
Add Logout Functionality,"['- Create logout button component', '- Implement token clearing functionality', '- Add redirect to login page after logout']","['Frontend', 'API', 'Security']",Done
Install Node.js Development Environment,"['- Download and install Node.js LTS version', '- Verify installation and npm', '- Configure development environment']",['Backend'],Done
Implement JWT Authentication,"['- Install `djangorestframework-simplejwt`', '- Configure JWT settings', '- Create token endpoints (obtain, refresh)']","['Security', 'Backend']",Done
Configure CORS for Frontend,"['- Install and configure django-cors-headers package', '- Add localhost:5173 to CORS whitelist for Vite development', '- Set up proper CORS headers for authentication requests']","['Security', 'Backend']",Done
Create React Login Form Component,"['- Build a **React form component** for logging in users.', '- **Description**: The form should include email and password fields and send a request to the login endpoint.']","['Frontend', 'API']",Done
Create API Endpoint to Mark Books as Read/Unread,"['- Create an API endpoint that allows users to **mark books as read or unread**.', '- **Description**: This endpoint will be used to update a book’s status (`is_read`).']",['API'],Done
Complete Login System,"['- Create LoginView using JWT', '- Add logout functionality', '- Add token refresh endpoint']","['API', 'Security']",Done
Create API Endpoint to Add New Books,"[""- Set up a **Django REST Framework** API endpoint to add new books to a user's library."", '- **Description**: Endpoint to allow users to add book entries to their library, including title, author, and genre.']",['API'],Done
Create book model in Django,"['- Create a model named **Book** with fields such as `title`, `author`, `genre`, `description`, and `cover_image_url`.', '- **Description**: This model will store book details that users can add to their library.']",['Backend'],Done
Create UserBook Model in Django,"['- Create a model named **UserBook** to link users with books.', '- Fields include `user` (foreign key to `CustomUser`), `book` (foreign key to `Book`), `is_read` (boolean to track read status), `is_favorite` (boolean to track favorites).', '- **Description**: This model will track user-specific details about each book in their collection.']",['Backend'],Done
Django project initialization,"['- nitialized the **Django project** using `django-admin startproject` to set up the basic project structure for **Visual Library**.', '- Ran the initial Django server to verify that the installation worked correctly.', '- Ensured the project has the correct file hierarchy, including **settings.py**, **urls.py**, and **wsgi.py**, to support further backend development.']",['Backend'],Done
Custom User Model,"['- Created a **CustomUser** model that extends Django’s `AbstractUser`.', '- Added custom fields where necessary to meet specific project requirements.', '- Updated settings to use this custom model for authentication (`AUTH_USER_MODEL`).', '- Enabled flexibility for future expansion, such as adding profile fields, without relying on the default Django user model.']","['Backend', 'Security']",Done
Admin Panel Configuration for Custom User,"['- Configured the **Django Admin Panel** to register and manage the **CustomUser** model.', '- Enabled user administration capabilities, including creating, viewing, editing, and deleting users directly from the admin interface.', '- Used `UserAdmin` to maintain consistency with default user functionality, while supporting our customizations.']","['Backend', 'Security']",Done
Tested Registration system,"['- Tested the **User Registration API** using the **Django REST Framework API Browser**.', '- Submitted test registration requests to verify that users could successfully create an account.', '- Checked responses for **validations** and **error handling** to ensure robustness.', '- Verified that new users were saved correctly in the database with appropriate attributes.']","['Security', 'Backend']",Done
Basic server and database setup,['No Description Present'],"['Security', 'Backend']",Done
Ran initial migrations,"['- Ran initial database migrations using `python manage.py migrate`.', '- Applied migrations for built-in Django apps (`auth`, `sessions`, etc.) and the **CustomUser** model.', '- Verified that the database was correctly set up to store user and other application data.', '- Ensured a consistent database state, providing a foundation for further model development.']",['Backend'],Done
Set up GitHub Repo,"['- Created a GitHub repository to manage all project source code for the Visual Book Library.', '- Set up version control for tracking changes, collaborating with team members, and maintaining code history.', '- Initialized the repository with a **.gitignore** file for Django and ensured the project is ready for future development and collaboration.']",['Backend'],Backlog
User authentication in admin panel,"['Current Status:', '', '✅ Basic admin panel access', '✅ Ability to log in as admin', '✅ Custom User model is registered in admin', '', '❌ Proper Admin Panel customization for User model (columns, filters, search)', '❌ Admin configuration for UserBook model', '❌ Admin configuration for Book model', '', '\u200c', '', '- Logged into the **Django Admin Panel** to verify that newly registered users could be viewed and managed.', '- Confirmed that users were correctly saved to the database, including their usernames, emails, and registration details.', '- Reviewed functionality such as adding and removing users, assigning groups, and managing user permissions.']","['Security', 'Backend']",Backlog
User registration API,"['Current Status:', '', '✅ Implemented using DRF', ' ✅ /register endpoint exists', '❌ Email validation not implemented yet', '❌ Comprehensive input validation not fully implemented', '❌ Proper error responses need improvement', '', '', 'Description:', '', '- Implemented the **User Registration API** using **Django REST Framework**.', '- Created the **/register** endpoint to allow new users to sign up with a **username, email, and password**.', '- Added **input validation** to ensure only valid data is stored in the database.', '- Designed the API to return appropriate responses for success or errors, ensuring users receive meaningful feedback.']",['Backend'],Backlog
Set Up CI/CD Pipeline Using GitHub Actions,"['- Create a **simple CI/CD pipeline** using GitHub Actions for automated deployment to AWS.', '- **Description**: Automate the deployment process to make future releases more efficient.']",['Dev Ops'],Backlog
Set Up AWS Staging Environment,"['- Configure an **AWS staging environment** to test the MVP.', '- **Description**: Use AWS Elastic Beanstalk to set up the backend for testing and staging.']",['Dev Ops'],Backlog
Create React Book Form Component,"['- Create a form component in React that lets users **add new books** to their library.', '- **Description**: The form should include fields like `title`, `author`, and `genre` and submit data to the backend API.']","['Frontend', 'API']",Backlog
