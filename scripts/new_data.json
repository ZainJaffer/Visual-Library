[{"Card Name": "Configure Development and Production Server Setup", "Description": ["- Set up proxy configuration for development environment to avoid running multiple servers", "- Configure production build process to serve frontend from Django", "- Create documentation for running the application in both development and production modes"], "Labels": ["Dev Ops", "Backend"]}, {"Card Name": "Create Protected API Routes", "Description": ["- Add JWT authentication classes to book-related views", "- Implement permission classes for user-specific book access", "- Add authentication error handling and responses"], "Labels": ["Security", "API"]}, {"Card Name": "Add Email Verification", "Description": ["- Set up email backend configuration", "- Create email verification endpoint", "- Implement verification email sending"], "Labels": ["Security", "API"]}, {"Card Name": "Create Book List Views", "Description": ["- Add endpoint to get all user's books", "- Implement filtering (read/unread/favorites)", "- Add pagination"], "Labels": ["API", "Backend"]}, {"Card Name": "Add Search Functionality", "Description": ["- Implement book search endpoint", "- Add filtering by title, author, genre", "- Add sorting options"], "Labels": ["API"]}, {"Card Name": "Add CORS Configuration", "Description": ["- Install django-cors-headers", "- Configure CORS settings for React frontend", "- Set up proper security headers"], "Labels": ["Security", "Backend"]}, {"Card Name": "Environment Configuration", "Description": ["- Move sensitive settings to environment variables", "- Create separate dev/prod settings files", "- Set up proper logging"], "Labels": ["Security", "Dev Ops"]}, {"Card Name": "Create Book List Component (Simplified Version)", "Description": ["- Build a component to **display books in categorized rows**, such as **Read** and **Unread**.", "- **Description**: This component will list books in the user\u2019s library, categorized by their status (`read`/`unread`)."], "Labels": ["Frontend"]}, {"Card Name": "Add Toggle Button for Read/Unread", "Description": ["- Add a button to the book list component to **toggle books as read or unread**.", "- **Description**: The toggle should call the backend API to update the book's `is_read` status."], "Labels": ["Frontend", "API"]}, {"Card Name": "Create React Registration Form Component", "Description": ["- Build a **React form component** that allows users to register (username, email, password).", "- **Description**: The form should send data to the registration API endpoint to create a new user account."], "Labels": ["Frontend", "API"]}, {"Card Name": "Integrate Frontend Forms with Backend Authentication", "Description": ["- Use **Axios** or **Fetch API** to send registration and login data from the frontend forms to the backend Django API.", "- **Description**: Integrate the login and registration forms with the backend so that users can register and log in properly."], "Labels": ["Frontend", "API", "Security"]}, {"Card Name": "User login API", "Description": ["Current Status:", "", "\u2705 Built using DRF and JWT", "\u2705 Endpoint for login exists", "\u274c Login with email (currently using username) - this needs modification", "\u2705 JWT token handling implemented", "\u2705 Verified credentials and provides JWT", "\u274c Protected routes tested with tokens", "", "\u200c", "", "- Built the **User Login API** using **Django REST Framework**.", "- Set up an endpoint for users to log in with their **email and password**.", "- Integrated **JWT (JSON Web Tokens)** to handle user sessions and security, ensuring the user stays logged in and can securely access protected routes.", "- Verified login credentials against the database and provided a **JWT token** upon successful authentication."], "Labels": ["Backend"]}, {"Card Name": "Set up React Project with Tailwind", "Description": ["- Initialize React project using Vite", "- Configure Tailwind CSS", "- Set up project structure for components"], "Labels": ["Frontend", "Backend"]}, {"Card Name": "Create Basic Navigation Component", "Description": ["- Create reusable navigation bar component", "- Add basic routing links (Home, Login, Register)", "- Add basic styling for MVP phase"], "Labels": ["Frontend"]}, {"Card Name": "Minimal React Setup", "Description": ["\u200c", "", "- Basic registration form", "- Basic login form", "- Simple protected route setup"], "Labels": ["Frontend", "Backend"]}, {"Card Name": "Add Logout Functionality", "Description": ["- Create logout button component", "- Implement token clearing functionality", "- Add redirect to login page after logout"], "Labels": ["Frontend", "API", "Security"]}, {"Card Name": "Install Node.js Development Environment", "Description": ["- Download and install Node.js LTS version", "- Verify installation and npm", "- Configure development environment"], "Labels": ["Backend"]}, {"Card Name": "Implement JWT Authentication", "Description": ["- Install `djangorestframework-simplejwt`", "- Configure JWT settings", "- Create token endpoints (obtain, refresh)"], "Labels": ["Security", "Backend"]}, {"Card Name": "Configure CORS for Frontend", "Description": ["- Install and configure django-cors-headers package", "- Add localhost:5173 to CORS whitelist for Vite development", "- Set up proper CORS headers for authentication requests"], "Labels": ["Security", "Backend"]}, {"Card Name": "Create React Login Form Component", "Description": ["- Build a **React form component** for logging in users.", "- **Description**: The form should include email and password fields and send a request to the login endpoint."], "Labels": ["Frontend", "API"]}, {"Card Name": "Create API Endpoint to Mark Books as Read/Unread", "Description": ["- Create an API endpoint that allows users to **mark books as read or unread**.", "- **Description**: This endpoint will be used to update a book\u2019s status (`is_read`)."], "Labels": ["API"]}, {"Card Name": "Complete Login System", "Description": ["- Create LoginView using JWT", "- Add logout functionality", "- Add token refresh endpoint"], "Labels": ["API", "Security"]}, {"Card Name": "Create API Endpoint to Add New Books", "Description": ["- Set up a **Django REST Framework** API endpoint to add new books to a user's library.", "- **Description**: Endpoint to allow users to add book entries to their library, including title, author, and genre."], "Labels": ["API"]}, {"Card Name": "Create book model in Django", "Description": ["- Create a model named **Book** with fields such as `title`, `author`, `genre`, `description`, and `cover_image_url`.", "- **Description**: This model will store book details that users can add to their library."], "Labels": ["Backend"]}, {"Card Name": "Create UserBook Model in Django", "Description": ["- Create a model named **UserBook** to link users with books.", "- Fields include `user` (foreign key to `CustomUser`), `book` (foreign key to `Book`), `is_read` (boolean to track read status), `is_favorite` (boolean to track favorites).", "- **Description**: This model will track user-specific details about each book in their collection."], "Labels": ["Backend"]}, {"Card Name": "Django project initialization", "Description": ["- nitialized the **Django project** using `django-admin startproject` to set up the basic project structure for **Visual Library**.", "- Ran the initial Django server to verify that the installation worked correctly.", "- Ensured the project has the correct file hierarchy, including **settings.py**, **urls.py**, and **wsgi.py**, to support further backend development."], "Labels": ["Backend"]}, {"Card Name": "Custom User Model", "Description": ["- Created a **CustomUser** model that extends Django\u2019s `AbstractUser`.", "- Added custom fields where necessary to meet specific project requirements.", "- Updated settings to use this custom model for authentication (`AUTH_USER_MODEL`).", "- Enabled flexibility for future expansion, such as adding profile fields, without relying on the default Django user model."], "Labels": ["Backend", "Security"]}, {"Card Name": "Admin Panel Configuration for Custom User", "Description": ["- Configured the **Django Admin Panel** to register and manage the **CustomUser** model.", "- Enabled user administration capabilities, including creating, viewing, editing, and deleting users directly from the admin interface.", "- Used `UserAdmin` to maintain consistency with default user functionality, while supporting our customizations."], "Labels": ["Backend", "Security"]}, {"Card Name": "Tested Registration system", "Description": ["- Tested the **User Registration API** using the **Django REST Framework API Browser**.", "- Submitted test registration requests to verify that users could successfully create an account.", "- Checked responses for **validations** and **error handling** to ensure robustness.", "- Verified that new users were saved correctly in the database with appropriate attributes."], "Labels": ["Security", "Backend"]}, {"Card Name": "Basic server and database setup", "Description": ["No Description Present"], "Labels": ["Security", "Backend"]}, {"Card Name": "Ran initial migrations", "Description": ["- Ran initial database migrations using `python manage.py migrate`.", "- Applied migrations for built-in Django apps (`auth`, `sessions`, etc.) and the **CustomUser** model.", "- Verified that the database was correctly set up to store user and other application data.", "- Ensured a consistent database state, providing a foundation for further model development."], "Labels": ["Backend"]}, {"Card Name": "Set up GitHub Repo", "Description": ["- Created a GitHub repository to manage all project source code for the Visual Book Library.", "- Set up version control for tracking changes, collaborating with team members, and maintaining code history.", "- Initialized the repository with a **.gitignore** file for Django and ensured the project is ready for future development and collaboration."], "Labels": ["Backend"]}, {"Card Name": "User authentication in admin panel", "Description": ["Current Status:", "", "\u2705 Basic admin panel access", "\u2705 Ability to log in as admin", "\u2705 Custom User model is registered in admin", "", "\u274c Proper Admin Panel customization for User model (columns, filters, search)", "\u274c Admin configuration for UserBook model", "\u274c Admin configuration for Book model", "", "\u200c", "", "- Logged into the **Django Admin Panel** to verify that newly registered users could be viewed and managed.", "- Confirmed that users were correctly saved to the database, including their usernames, emails, and registration details.", "- Reviewed functionality such as adding and removing users, assigning groups, and managing user permissions."], "Labels": ["Security", "Backend"]}, {"Card Name": "User registration API", "Description": ["Current Status:", "", "\u2705 Implemented using DRF", " \u2705 /register endpoint exists", "\u274c Email validation not implemented yet", "\u274c Comprehensive input validation not fully implemented", "\u274c Proper error responses need improvement", "", "", "Description:", "", "- Implemented the **User Registration API** using **Django REST Framework**.", "- Created the **/register** endpoint to allow new users to sign up with a **username, email, and password**.", "- Added **input validation** to ensure only valid data is stored in the database.", "- Designed the API to return appropriate responses for success or errors, ensuring users receive meaningful feedback."], "Labels": ["Backend"]}, {"Card Name": "Set Up CI/CD Pipeline Using GitHub Actions", "Description": ["- Create a **simple CI/CD pipeline** using GitHub Actions for automated deployment to AWS.", "- **Description**: Automate the deployment process to make future releases more efficient."], "Labels": ["Dev Ops"]}, {"Card Name": "Set Up AWS Staging Environment", "Description": ["- Configure an **AWS staging environment** to test the MVP.", "- **Description**: Use AWS Elastic Beanstalk to set up the backend for testing and staging."], "Labels": ["Dev Ops"]}, {"Card Name": "Create React Book Form Component", "Description": ["- Create a form component in React that lets users **add new books** to their library.", "- **Description**: The form should include fields like `title`, `author`, and `genre` and submit data to the backend API."], "Labels": ["Frontend", "API"]}]