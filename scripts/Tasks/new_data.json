[
    {
        "Card Name": "Enhance Smart Favorites Display",
        "Description": [
            "- Update Favorites Visual System",
            "- Update wishlist icon for unread favorites",
            "- Keep star icon for read favoritesAdd visual distinction between wishlist (unread + favorite) and collection (read + favorite)",
            "",
            "**Details**: Makes the favorite system more intuitive by using different icons based on read status. When a book is unread, favoriting it will use a wishlist-appropriate icon, while read books will keep the star icon for favorites. This requires a simple frontend update to the BookRow component to show different icons based on the book's read status"
        ],
        "Labels": [
            "Frontend"
        ],
        "Stage": [
            "To Do"
        ]
    },
    {
        "Card Name": "Optimize Book Query Performance",
        "Description": [
            "- Add database indexes for combined status queries",
            "- Implement query optimization for favorites filtering",
            "- Add caching for frequent status combinations",
            "- \u200c",
            "- **Details**: Essential performance work needed before adding real-time features. Creates database indexes for the new combined status queries, implements query optimizations to prevent N+1 problems, and sets up caching. This ensures the application remains responsive as users' libraries grow and prevents slow response times during filtering and searching"
        ],
        "Labels": [
            "Backend"
        ],
        "Stage": [
            "To Do"
        ]
    },
    {
        "Card Name": "Implement Global Error Handling",
        "Description": [
            "- Create error handling utilities for API failures",
            "- Add user-friendly error messages",
            "- Implement retry and fallback mechanisms",
            "",
            "Creates a comprehensive error handling system for both internal and external API interactions. Handles network issues, timeouts, and invalid states while providing clear feedback to users. Essential for integrating with Google Books API and implementing real-time features reliably."
        ],
        "Labels": [
            "Frontend",
            "API"
        ],
        "Stage": [
            "To Do"
        ]
    },
    {
        "Card Name": "Integrate Google Books API Search",
        "Description": [
            "- Set up Google Books API client service",
            "- Create search endpoint with error handling",
            "- Implement data normalization for API responses",
            "",
            " **Details**: Implements core book discovery by creating a service layer for Google Books API interaction. Handles authentication, rate limiting, and caching. Normalizes external data to match our application's model, ensuring consistent structure regardless of source and gracefully handling missing data."
        ],
        "Labels": [
            "Backend",
            "API"
        ],
        "Stage": [
            "To Do"
        ]
    },
    {
        "Card Name": "Create Book Details Page Route and Layout",
        "Description": [
            "- Implement dedicated route for book details page (/books/:id)",
            "- Create detailed book information layout with cover, metadata, and description",
            "- Add click navigation from book cards to details page",
            "",
            "Creates the foundation for viewing individual book details. When users click any book in the library or search results, they'll be taken to a dedicated page showing comprehensive information about that book. Implements proper routing and navigation, ensuring browser history works correctly and users can easily return to their previous view."
        ],
        "Labels": [
            "Frontend"
        ],
        "Stage": [
            "To Do"
        ]
    },
    {
        "Card Name": "Add Reading Status Management to Book Detail",
        "Description": [
            "- Add reading status controls to book details page",
            "- Create currently reading row on homepage with prominent placement",
            "- Implement status transitions (unread \u2192 reading \u2192 read)",
            "",
            "**Details**: Adds reading status management to the book details page while also creating the homepage display for currently reading books. Implements clear status controls in the context of detailed book information, with changes reflected immediately in the homepage view."
        ],
        "Labels": [
            "Frontend",
            "Backend",
            "API"
        ],
        "Stage": [
            "To Do"
        ]
    },
    {
        "Card Name": "Build Discover Search Interface",
        "Description": [
            "- Create search results grid with book details",
            "- Add contextual favorite buttons (Add to Wishlist/Collection)",
            "- Implement one-click add to library functionality",
            "",
            "Creates the main interface for finding and adding new books. Displays search results in a grid format with enough detail for users to make decisions. Implements smart favorite buttons that adapt based on book status (wishlist vs collection) and enables quick addition to library."
        ],
        "Labels": [
            "Frontend"
        ],
        "Stage": [
            "To Do"
        ]
    },
    {
        "Card Name": "Implement Real-time Search in My Books",
        "Description": [
            "- Add search bar component with real-time filtering capability",
            "- Implement fuzzy search using Fuse.js for typo tolerance",
            "- Add loading states and error handling for search results",
            "",
            " **Details**: Creates a responsive search experience within the user's existing library. Uses fuzzy search to handle typos and partial matches, making it easier to find books. Implements real-time filtering that updates as users type, with appropriate loading states and error handling for a smooth experience."
        ],
        "Labels": [
            "Frontend",
            "API"
        ],
        "Stage": [
            "To Do"
        ]
    },
    {
        "Card Name": "Create Recently Added Books Row",
        "Description": [
            "- Implement horizontal scrolling row for recent books",
            "- Add backend endpoint to fetch latest 25 books",
            "- Integrate with existing book display components",
            "- Should only show when there is at least 1 book recently added",
            "",
            "**Details**: Adds a dynamic section showing recently added books, helping users track new additions to their library. Implements horizontal scrolling for efficient space usage and integrates with existing display components. Creates a dedicated endpoint for fetching recent books efficiently"
        ],
        "Labels": [
            "Frontend",
            "API"
        ],
        "Stage": [
            "To Do"
        ]
    },
    {
        "Card Name": "Implement Cover Image Management in Book Details",
        "Description": [
            "- Add cover management section to book details page",
            "- Create image preview and validation within details view",
            "- Implement fallback image system with clear user feedback",
            "",
            "**Details**: Integrates cover management functionality directly into the book details page. Users can manage book covers in context while viewing other book information. Provides clear preview and feedback mechanisms within the details view."
        ],
        "Labels": [
            "Frontend",
            "API"
        ],
        "Stage": [
            "To Do"
        ]
    },
    {
        "Card Name": "Create Cover Image API Endpoints",
        "Description": [
            "- Add endpoint for updating book cover URLs",
            "- Implement image URL validation",
            "- Create error handling for invalid images",
            "",
            "**Details**: Enables book cover management functionality. Creates endpoints for updating cover images, validates URLs to ensure they point to actual images, and handles cases where images become unavailable. Important for maintaining library visual appeal and handling different cover versions."
        ],
        "Labels": [
            "Backend",
            "API"
        ],
        "Stage": [
            "To Do"
        ]
    },
    {
        "Card Name": "Implement Book Notes Backend",
        "Description": [
            "- Create Notes model with character limit constraints",
            "- Add API endpoints for CRUD operations",
            "- Implement validation and error handling",
            "",
            " **Details**: Establishes the foundation for personal book notes. Creates a new Notes model with appropriate constraints, implements endpoints for managing notes, and ensures proper validation. This enables users to maintain private notes about their books with reliable storage and retrieval."
        ],
        "Labels": [
            "Backend",
            "API"
        ],
        "Stage": [
            "To Do"
        ]
    },
    {
        "Card Name": "Implement Book Details Page Features",
        "Description": [
            "- Add status controls (read/unread, currently reading, favorites)",
            "- Create cover image management section with alternative covers",
            "- Implement notes section with edit capabilities",
            "",
            "Builds the interactive features of the book details page. Creates a central hub where users can manage all aspects of a book: change its status, update its cover, add notes, and more. All book management actions are consolidated in this single, detailed view for a cohesive user experience."
        ],
        "Labels": [
            "Frontend",
            "API"
        ],
        "Stage": [
            "To Do"
        ]
    },
    {
        "Card Name": "Add Cover Selection to Book Details",
        "Description": [
            "- Integrate cover gallery modal into book details page",
            "- Add custom cover upload option within details view",
            "- Create seamless cover switching experience",
            "",
            "Implements cover selection functionality directly within the book details context. Users can browse alternative covers or upload custom ones while viewing the book's complete information. Creates a cohesive experience for managing book appearance."
        ],
        "Labels": [
            "Frontend",
            "API"
        ],
        "Stage": [
            "To Do"
        ]
    },
    {
        "Card Name": "Implement Notes Section in Book Details",
        "Description": [
            "- Build notes section within book details page",
            "- Add edit/delete functionality with confirmations",
            "- Implement auto-save and error handling for notes",
            "",
            " Integrates note-taking functionality directly into the book details page. Creates a dedicated section where users can view and edit notes while seeing other book information. Implements seamless editing experience within the context of the details view."
        ],
        "Labels": [
            "Frontend"
        ],
        "Stage": [
            "To Do"
        ]
    },
    {
        "Card Name": "Add API Response Logging",
        "Description": [
            "- Set up logging for API interactions",
            "- Create error tracking system",
            "- Implement monitoring for API failures",
            "",
            "Implements comprehensive logging and monitoring for all API interactions. Tracks errors and unusual patterns, especially with external API calls. Creates a monitoring system to alert on API failures or performance issues, ensuring reliable operation and quick problem detection"
        ],
        "Labels": [
            "Dev Ops",
            "Backend"
        ],
        "Stage": [
            "To Do"
        ]
    },
    {
        "Card Name": "Enhance Book Categories Display",
        "Description": [
            "- Group books by genre in horizontal rows",
            "- Add genre headers and section navigation",
            "- Implement category-based filtering",
            "- Restyle to grey/black theme",
            "- Implement My Books and Discover pages"
        ],
        "Labels": [
            "Frontend",
            "API"
        ],
        "Stage": [
            "Done"
        ]
    },
    {
        "Card Name": "Implement Book Card States",
        "Description": [
            "- Add loading states for book card interactions",
            "- Add transition animations for status changes"
        ],
        "Labels": [
            "Frontend"
        ],
        "Stage": [
            "Done"
        ]
    },
    {
        "Card Name": "Add Section Navigation Controls",
        "Description": [
            "- Add left/right scroll controls for book rows",
            "- Implement smooth scrolling indicators",
            "- Add visual feedback for scrollable content"
        ],
        "Labels": [
            "Frontend"
        ],
        "Stage": [
            "Done"
        ]
    },
    {
        "Card Name": "Implement Horizontal Scrolling Rows",
        "Description": [
            "- Convert book lists to horizontal scrolling containers",
            "- Add smooth scrolling behavior and overflow handling",
            "- Implement responsive grid layout for different screen sizes"
        ],
        "Labels": [
            "Frontend"
        ],
        "Stage": [
            "Done"
        ]
    },
    {
        "Card Name": "Implement Book Cover Upload Feature",
        "Description": [
            "- Add image upload field to AddBook form with preview and validation (max size, format)",
            "- Configure local media storage and URL handling for uploaded images",
            "- Add image compression and error handling for failed uploads"
        ],
        "Labels": [
            "Frontend",
            "Backend"
        ],
        "Stage": [
            "Done"
        ]
    },
    {
        "Card Name": "Implement Default Book Cover System",
        "Description": [
            "- Implement random cover selection from media library when no cover\\_image\\_url provided",
            "- Add image optimization and lazy loading for performance"
        ],
        "Labels": [
            "Frontend",
            "Assets"
        ],
        "Stage": [
            "Done"
        ]
    },
    {
        "Card Name": "Generate Card & Book Assets",
        "Description": [
            "- Use Open Library API to generate books and image covers",
            "- Generate JSON file with 200 books (titles, authors, descriptions) evenly distributed across 8-10 genres using AI",
            "- Create 20 AI-generated default book covers at 400x600px JPG format with consistent style"
        ],
        "Labels": [
            "Assets",
            "Backend",
            "API"
        ],
        "Stage": [
            "Done"
        ]
    },
    {
        "Card Name": "Add Favorite Toggle Button",
        "Description": [
            "- Add favorite icon button to book list items",
            "- Implement favorite toggle functionality",
            "- Update UI to show favorite status"
        ],
        "Labels": [
            "Frontend",
            "API"
        ],
        "Stage": [
            "Done"
        ]
    },
    {
        "Card Name": "Add Toggle Button for Read/Unread",
        "Description": [
            "- Add a button to the book list component to **toggle books as read or unread**.",
            "- **Description**: The toggle should call the backend API to update the book's `is_read` status."
        ],
        "Labels": [
            "Frontend",
            "API"
        ],
        "Stage": [
            "Done"
        ]
    },
    {
        "Card Name": "Create Book List Component (Simplified Version)",
        "Description": [
            "- Build a component to **display books in categorized rows**, such as **Read** and **Unread**.",
            "- **Description**: This component will list books in the user\u2019s library, categorized by their status (`read`/`unread`)."
        ],
        "Labels": [
            "Frontend"
        ],
        "Stage": [
            "Done"
        ]
    },
    {
        "Card Name": "Create AddBook Component",
        "Description": [
            "- Create a simple form with fields for title, author, genre, and description",
            "- Implement form submission to backend API",
            "- Add basic validation and error handling"
        ],
        "Labels": [
            "Frontend",
            "API"
        ],
        "Stage": [
            "Done"
        ]
    },
    {
        "Card Name": "Create Protected Book Routes",
        "Description": [
            "- Set up protected routes for book management pages",
            "- Implement basic navigation between book features",
            "- Ensure authentication state properly protects book routes"
        ],
        "Labels": [
            "Frontend",
            "Security"
        ],
        "Stage": [
            "Done"
        ]
    },
    {
        "Card Name": "Create Protected API Routes",
        "Description": [
            "- Add JWT authentication classes to book-related views",
            "- Implement permission classes for user-specific book access",
            "- Add authentication error handling and responses"
        ],
        "Labels": [
            "Security",
            "API"
        ],
        "Stage": [
            "Done"
        ]
    },
    {
        "Card Name": "Create Book List API Endpoint",
        "Description": [
            "- Implement GET endpoint to retrieve user's books",
            "- Add filtering capability for read/unread status",
            "-  Ensure proper authentication checks"
        ],
        "Labels": [
            "Backend",
            "API"
        ],
        "Stage": [
            "Done"
        ]
    },
    {
        "Card Name": "Integrate Frontend Forms with Backend Authentication",
        "Description": [
            "- Use **Axios** or **Fetch API** to send registration and login data from the frontend forms to the backend Django API.",
            "- **Description**: Integrate the login and registration forms with the backend so that users can register and log in properly."
        ],
        "Labels": [
            "Frontend",
            "API",
            "Security"
        ],
        "Stage": [
            "Done"
        ]
    },
    {
        "Card Name": "User login API",
        "Description": [
            "Current Status:",
            "",
            "\u2705 Built using DRF and JWT",
            "\u2705 Endpoint for login exists",
            "\u2705 Login with email",
            "\u2705 JWT token handling implemented",
            "\u2705 Verified credentials and provides JWT",
            "\u274c Protected routes tested with tokens",
            "",
            "\u200c",
            "",
            "- Built the **User Login API** using **Django REST Framework**.",
            "- Set up an endpoint for users to log in with their **email and password**.",
            "- Integrated **JWT (JSON Web Tokens)** to handle user sessions and security, ensuring the user stays logged in and can securely access protected routes.",
            "- Verified login credentials against the database and provided a **JWT token** upon successful authentication."
        ],
        "Labels": [
            "Backend"
        ],
        "Stage": [
            "Done"
        ]
    },
    {
        "Card Name": "Create React Registration Form Component",
        "Description": [
            "- Build a **React form component** that allows users to register (email, password).",
            "- **Description**: The form should send data to the registration API endpoint to create a new user account."
        ],
        "Labels": [
            "Frontend",
            "API"
        ],
        "Stage": [
            "Done"
        ]
    },
    {
        "Card Name": "Set up virtual environment for backend package management",
        "Description": [
            "- Configure a virtual environment to manage project dependencies.",
            "- Use `venv` or `virtualenv` to keep packages organized and isolated.",
            "- Document basic setup steps for easy reference in future projects."
        ],
        "Labels": [
            "Backend",
            "Dev Ops"
        ],
        "Stage": [
            "Done"
        ]
    },
    {
        "Card Name": "Configure .gitignore for project",
        "Description": [
            "- Add `.gitignore` entries to exclude unnecessary or sensitive files, such as environment files.",
            "- Focus on preventing common clutter (e.g., `.env`, `__pycache__`, `.DS_Store`).",
            "- Review the project folder for any extra files that shouldn\u2019t be tracked."
        ],
        "Labels": [
            "Backend",
            "Dev Ops"
        ],
        "Stage": [
            "Done"
        ]
    },
    {
        "Card Name": "Create Basic Navigation Component",
        "Description": [
            "- Create reusable navigation bar component",
            "- Add basic routing links (Home, Login, Register)",
            "- Add basic styling for MVP phase"
        ],
        "Labels": [
            "Frontend"
        ],
        "Stage": [
            "Done"
        ]
    },
    {
        "Card Name": "Minimal React Setup",
        "Description": [
            "\u200c",
            "",
            "- Basic registration form",
            "- Basic login form",
            "- Simple protected route setup"
        ],
        "Labels": [
            "Frontend",
            "Backend"
        ],
        "Stage": [
            "Done"
        ]
    },
    {
        "Card Name": "Add Logout Functionality",
        "Description": [
            "- Create logout button component",
            "- Implement token clearing functionality",
            "- Add redirect to login page after logout"
        ],
        "Labels": [
            "Frontend",
            "API",
            "Security"
        ],
        "Stage": [
            "Done"
        ]
    },
    {
        "Card Name": "Install Node.js Development Environment",
        "Description": [
            "- Download and install Node.js LTS version",
            "- Verify installation and npm",
            "- Configure development environment"
        ],
        "Labels": [
            "Backend"
        ],
        "Stage": [
            "Done"
        ]
    },
    {
        "Card Name": "Implement JWT Authentication",
        "Description": [
            "- Install `djangorestframework-simplejwt`",
            "- Configure JWT settings",
            "- Create token endpoints (obtain, refresh)"
        ],
        "Labels": [
            "Security",
            "Backend"
        ],
        "Stage": [
            "Done"
        ]
    },
    {
        "Card Name": "Configure CORS for Frontend",
        "Description": [
            "- Install and configure django-cors-headers package",
            "- Add localhost:5173 to CORS whitelist for Vite development",
            "- Set up proper CORS headers for authentication requests"
        ],
        "Labels": [
            "Security",
            "Backend"
        ],
        "Stage": [
            "Done"
        ]
    },
    {
        "Card Name": "Create React Login Form Component",
        "Description": [
            "- Build a **React form component** for logging in users.",
            "- **Description**: The form should include email and password fields and send a request to the login endpoint."
        ],
        "Labels": [
            "Frontend",
            "API"
        ],
        "Stage": [
            "Done"
        ]
    },
    {
        "Card Name": "Create API Endpoint to Mark Books as Read/Unread",
        "Description": [
            "- Create an API endpoint that allows users to **mark books as read or unread**.",
            "- **Description**: This endpoint will be used to update a book\u2019s status (`is_read`)."
        ],
        "Labels": [
            "API"
        ],
        "Stage": [
            "Done"
        ]
    },
    {
        "Card Name": "Complete Login System",
        "Description": [
            "- Create LoginView using JWT",
            "- Add logout functionality",
            "- Add token refresh endpoint"
        ],
        "Labels": [
            "API",
            "Security"
        ],
        "Stage": [
            "Done"
        ]
    },
    {
        "Card Name": "Create API Endpoint to Add New Books",
        "Description": [
            "- Set up a **Django REST Framework** API endpoint to add new books to a user's library.",
            "- **Description**: Endpoint to allow users to add book entries to their library, including title, author, and genre."
        ],
        "Labels": [
            "API"
        ],
        "Stage": [
            "Done"
        ]
    },
    {
        "Card Name": "Create book model in Django",
        "Description": [
            "- Create a model named **Book** with fields such as `title`, `author`, `genre`, `description`, and `cover_image_url`.",
            "- **Description**: This model will store book details that users can add to their library."
        ],
        "Labels": [
            "Backend"
        ],
        "Stage": [
            "Done"
        ]
    },
    {
        "Card Name": "Create UserBook Model in Django",
        "Description": [
            "- Create a model named **UserBook** to link users with books.",
            "- Fields include `user` (foreign key to `CustomUser`), `book` (foreign key to `Book`), `is_read` (boolean to track read status), `is_favorite` (boolean to track favorites).",
            "- **Description**: This model will track user-specific details about each book in their collection."
        ],
        "Labels": [
            "Backend"
        ],
        "Stage": [
            "Done"
        ]
    },
    {
        "Card Name": "Django project initialization",
        "Description": [
            "- nitialized the **Django project** using `django-admin startproject` to set up the basic project structure for **Visual Library**.",
            "- Ran the initial Django server to verify that the installation worked correctly.",
            "- Ensured the project has the correct file hierarchy, including **settings.py**, **urls.py**, and **wsgi.py**, to support further backend development."
        ],
        "Labels": [
            "Backend"
        ],
        "Stage": [
            "Done"
        ]
    },
    {
        "Card Name": "Custom User Model",
        "Description": [
            "- Created a **CustomUser** model that extends Django\u2019s `AbstractUser`.",
            "- Added custom fields where necessary to meet specific project requirements.",
            "- Updated settings to use this custom model for authentication (`AUTH_USER_MODEL`).",
            "- Enabled flexibility for future expansion, such as adding profile fields, without relying on the default Django user model."
        ],
        "Labels": [
            "Backend",
            "Security"
        ],
        "Stage": [
            "Done"
        ]
    },
    {
        "Card Name": "Admin Panel Configuration for Custom User",
        "Description": [
            "- Configured the **Django Admin Panel** to register and manage the **CustomUser** model.",
            "- Enabled user administration capabilities, including creating, viewing, editing, and deleting users directly from the admin interface.",
            "- Used `UserAdmin` to maintain consistency with default user functionality, while supporting our customizations."
        ],
        "Labels": [
            "Backend",
            "Security"
        ],
        "Stage": [
            "Done"
        ]
    },
    {
        "Card Name": "Tested Registration system",
        "Description": [
            "- Tested the **User Registration API** using the **Django REST Framework API Browser**.",
            "- Submitted test registration requests to verify that users could successfully create an account.",
            "- Checked responses for **validations** and **error handling** to ensure robustness.",
            "- Verified that new users were saved correctly in the database with appropriate attributes."
        ],
        "Labels": [
            "Security",
            "Backend"
        ],
        "Stage": [
            "Done"
        ]
    },
    {
        "Card Name": "Basic server and database setup",
        "Description": [
            "No Description Present"
        ],
        "Labels": [
            "Security",
            "Backend"
        ],
        "Stage": [
            "Done"
        ]
    },
    {
        "Card Name": "Ran initial migrations",
        "Description": [
            "- Ran initial database migrations using `python manage.py migrate`.",
            "- Applied migrations for built-in Django apps (`auth`, `sessions`, etc.) and the **CustomUser** model.",
            "- Verified that the database was correctly set up to store user and other application data.",
            "- Ensured a consistent database state, providing a foundation for further model development."
        ],
        "Labels": [
            "Backend"
        ],
        "Stage": [
            "Done"
        ]
    },
    {
        "Card Name": "Create Basic Test Plan",
        "Description": [
            "- Document critical user flows for manual testing",
            "- Create checklist for responsive layout verification\"",
            "- Add basic Jest tests for key React components"
        ],
        "Labels": [
            "Testing"
        ],
        "Stage": [
            "Backlog"
        ]
    },
    {
        "Card Name": "Add Sort Functionality for Books",
        "Description": [
            "- Implement backend endpoint for sorting by title/author",
            "- Add sorting controls to frontend book sections",
            "- Update BookList component to handle sort parameters"
        ],
        "Labels": [
            "Frontend",
            "API"
        ],
        "Stage": [
            "Backlog"
        ]
    },
    {
        "Card Name": "Create Automated E2E Test Suite",
        "Description": [
            "- Set up Cypress for cross-browser testing",
            "- Create test scripts for database population verification",
            "- Implement visual regression tests for responsive layouts"
        ],
        "Labels": [
            "Testing"
        ],
        "Stage": [
            "Backlog"
        ]
    },
    {
        "Card Name": "Implement Book Deletion Flow",
        "Description": [
            "- Create confirmation modal for delete action",
            "- Handle deletion success/failure states",
            "- Implement smooth removal animation from book list"
        ],
        "Labels": [
            "Frontend",
            "API"
        ],
        "Stage": [
            "Backlog"
        ]
    },
    {
        "Card Name": "Create Book Edit Modal",
        "Description": [
            "- Create modal component for editing book details",
            "- Implement form validation and error handling",
            "- Add optimistic updates for edited book data"
        ],
        "Labels": [
            "Frontend",
            "API"
        ],
        "Stage": [
            "Backlog"
        ]
    },
    {
        "Card Name": "Implement Book Context Menu",
        "Description": [
            "- Add right-click context menu with edit/delete options",
            "- Create three-dot menu overlay on hover (mobile/tablet fallback)",
            "- Implement smooth transitions for menu appearance/disappearance\""
        ],
        "Labels": [
            "Frontend"
        ],
        "Stage": [
            "Backlog"
        ]
    },
    {
        "Card Name": "Add CORS Configuration",
        "Description": [
            "- Install django-cors-headers",
            "- Configure CORS settings for React frontend",
            "- Set up proper security headers"
        ],
        "Labels": [
            "Security",
            "Backend"
        ],
        "Stage": [
            "Backlog"
        ]
    },
    {
        "Card Name": "Environment Configuration",
        "Description": [
            "- Move sensitive settings to environment variables",
            "- Create separate dev/prod settings files",
            "- Set up proper logging"
        ],
        "Labels": [
            "Security",
            "Dev Ops"
        ],
        "Stage": [
            "Backlog"
        ]
    },
    {
        "Card Name": "Configure Development and Production Server Setup",
        "Description": [
            "- Set up proxy configuration for development environment to avoid running multiple servers",
            "- Configure production build process to serve frontend from Django",
            "- Create documentation for running the application in both development and production modes"
        ],
        "Labels": [
            "Dev Ops",
            "Backend"
        ],
        "Stage": [
            "Backlog"
        ]
    },
    {
        "Card Name": "Add Search Functionality",
        "Description": [
            "- Implement book search endpoint",
            "- Add filtering by title, author, genre",
            "- Add sorting options"
        ],
        "Labels": [
            "API"
        ],
        "Stage": [
            "Backlog"
        ]
    },
    {
        "Card Name": "Add Email Verification",
        "Description": [
            "- Set up email backend configuration",
            "- Create email verification endpoint",
            "- Implement verification email sending"
        ],
        "Labels": [
            "Security",
            "API"
        ],
        "Stage": [
            "Backlog"
        ]
    },
    {
        "Card Name": "Set up GitHub Repo",
        "Description": [
            "- Created a GitHub repository to manage all project source code for the Visual Book Library.",
            "- Set up version control for tracking changes, collaborating with team members, and maintaining code history.",
            "- Initialized the repository with a **.gitignore** file for Django and ensured the project is ready for future development and collaboration."
        ],
        "Labels": [
            "Backend"
        ],
        "Stage": [
            "Backlog"
        ]
    },
    {
        "Card Name": "User authentication in admin panel",
        "Description": [
            "Current Status:",
            "",
            "\u2705 Basic admin panel access",
            "\u2705 Ability to log in as admin",
            "\u2705 Custom User model is registered in admin",
            "",
            "\u274c Proper Admin Panel customization for User model (columns, filters, search)",
            "\u274c Admin configuration for UserBook model",
            "\u274c Admin configuration for Book model",
            "",
            "\u200c",
            "",
            "- Logged into the **Django Admin Panel** to verify that newly registered users could be viewed and managed.",
            "- Confirmed that users were correctly saved to the database, including their usernames, emails, and registration details.",
            "- Reviewed functionality such as adding and removing users, assigning groups, and managing user permissions."
        ],
        "Labels": [
            "Security",
            "Backend"
        ],
        "Stage": [
            "Backlog"
        ]
    },
    {
        "Card Name": "User registration API",
        "Description": [
            "Current Status:",
            "",
            "\u2705 Implemented using DRF",
            " \u2705 /register endpoint exists",
            "\u274c Email validation not implemented yet",
            "\u274c Comprehensive input validation not fully implemented",
            "\u274c Proper error responses need improvement",
            "",
            "",
            "Description:",
            "",
            "- Implemented the **User Registration API** using **Django REST Framework**.",
            "- Created the **/register** endpoint to allow new users to sign up with a **username, email, and password**.",
            "- Added **input validation** to ensure only valid data is stored in the database.",
            "- Designed the API to return appropriate responses for success or errors, ensuring users receive meaningful feedback."
        ],
        "Labels": [
            "Backend"
        ],
        "Stage": [
            "Backlog"
        ]
    },
    {
        "Card Name": "Set Up CI/CD Pipeline Using GitHub Actions",
        "Description": [
            "- Create a **simple CI/CD pipeline** using GitHub Actions for automated deployment to AWS.",
            "- **Description**: Automate the deployment process to make future releases more efficient."
        ],
        "Labels": [
            "Dev Ops"
        ],
        "Stage": [
            "Backlog"
        ]
    },
    {
        "Card Name": "Set Up AWS Staging Environment",
        "Description": [
            "- Configure an **AWS staging environment** to test the MVP.",
            "- **Description**: Use AWS Elastic Beanstalk to set up the backend for testing and staging."
        ],
        "Labels": [
            "Dev Ops"
        ],
        "Stage": [
            "Backlog"
        ]
    },
    {
        "Card Name": "Create React Book Form Component",
        "Description": [
            "- Create a form component in React that lets users **add new books** to their library.",
            "- **Description**: The form should include fields like `title`, `author`, and `genre` and submit data to the backend API."
        ],
        "Labels": [
            "Frontend",
            "API"
        ],
        "Stage": [
            "Backlog"
        ]
    }
]